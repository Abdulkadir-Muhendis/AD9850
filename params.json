{"name":"AD9850","tagline":"AD9850 serial library for arduino","body":"# Arduino serial library for AD9850 #\r\nF4GOJ Christophe f4goj@free.fr\r\n\r\nAugust 2014\r\n\r\nAD9850 datasheet at http://www.analog.com/static/imported-files/data_sheets/AD9850.pdf\r\n\r\nUse this library freely.\r\n\r\n## Installation ##\r\nTo use the **AD9850** library:  \r\n- Go to https://github.com/F4GOJ/AD9850, click the [Download ZIP](https://github.com/F4GOJ/AD9850/archive/master.zip) button and save the ZIP file to a convenient location on your PC.\r\n- Uncompress the downloaded file.  This will result in a folder containing all the files for the library, that has a name that includes the branch name, usually **AD9850-master**.\r\n- Rename the folder to  **AD9850**.\r\n- Copy the renamed folder to the Arduino sketchbook\\libraries folder.\r\n\r\n\r\n## Usage notes ##\r\n\r\nThe **AD9850** library instantiates a **DDS** object, the user does not need to do this.\r\n\r\n```c++\r\n#include <AD9850.h>    //http://github.com/F4GOJ/AD9850\r\n\r\n```\r\n## Hardware connections : ##\r\n\r\n![ad9850](https://raw.githubusercontent.com/F4GOJ/AD9850/master/images/AD9850.png)\r\n\r\n- W_CLK   -> any pin\r\n- FQ_UD   -> any pin\r\n- DATA/D7 -> any pin\r\n- RESET   -> any pin\r\n\r\n## Functions : ##\r\n\r\n###begin(int w_clk_pin, int fq_ud_pin, int data_pin, int reset_pin)\r\n#####Description\r\nInitialize the output pins and master reset the AD9850\r\n#####Syntax\r\n`DDS.begin(w_clk, fq_ud, data, reset);`\r\n#####Parameters\r\n**w_clk :** Working clock output pin, any pin *(int)*<br>\r\n**fq_ud :** Frequency update pin, any pin. *(int)*<br>\r\n**data  :** Serial data output pin, any pin *(int)*<br>\r\n**reset :** Reset output pin, any pin. *(int)*\r\n#####Returns\r\nNone.\r\n#####Example\r\n```c++\r\nvoid setup(){\r\n DDS.begin(6, 7, 8, 9);\r\n}\r\n```\r\n###calibrate(double trim_frequency)\r\n#####Description\r\nCompensation of crystal oscillator frequency.<br>\r\nCan be used at any time after initialization.\r\n#####Syntax\r\n`DDS.calibrate(trim_freq);`\r\n#####Parameters\r\n**trim_freq :** Adjust around 125000000 to match the real crystal oscillator frequency. *(double)*\r\n#####Returns\r\nNone.\r\n#####Example\r\n```c++\r\nvoid setup(){\r\n DDS.begin(6, 7, 8, 9);\r\n}\r\n\r\nvoid loop(){\r\n DDS.calibrate(124999000);\r\n}\r\n```\r\n###setfreq(double frequency, int phase)\r\n#####Description\r\nSets the output frequency of the AD9850 and the phase of the signal.\r\n#####Syntax\r\n`DDS.setfreq(frequency, phase);`\r\n#####Parameters\r\n**frequency :** Output frequency in Hz. *(double)*<br>\r\n**phase :** Sets the phase of the output signal, coded on 5 bits allows 32 phase steps of 11,25Â° each. *(int)*\r\n#####Returns\r\nNone.\r\n#####Example\r\n```c++\r\ndouble frequency = 10000000;\r\nint phase = 0;\r\nDDS.setfreq(frequency, phase);\r\n```\r\n###down()\r\n#####Description\r\nPower down mode reducing the dissipated power from 380mW to 30mW at 5V\r\n#####Syntax\r\n`DDS.down();`\r\n#####Parameters\r\nNone.\r\n#####Returns\r\nNone.\r\n#####Example\r\n```c++\r\nDDS.down();\r\n```\r\n###up()\r\n#####Description\r\nWakes-up the AD9850 from power down mode.\r\n#####Syntax\r\n`DDS.up();`\r\n#####Parameters\r\nNone.\r\n#####Returns\r\nNone.\r\n#####Example\r\n```c++\r\nDDS.down(); // Entering power down mode\r\n\r\n// some code doing something\r\n\r\n...\r\n\r\nDDS.up(); // WAKE-UP !!! :)\r\n```\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}